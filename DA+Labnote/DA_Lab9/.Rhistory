knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ISLR2)
head(Smarket)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(ISLR2)
library(dplyr)
head(Default)
model1 = glm(default ~ balance, family = binomial, data = Default)
summary(model1)
model2 = glm(default ~ balance + income, family = binomial, data = Default)
summary(model2)
pred = model2$fitted.values>0.5
table_lr = table(real = Default$default, pred)
table_lr
predict(model1, newdata = data.frame(balance = 1000, income = 20000), type = "response")
predict(model2, newdata = data.frame(balance = 1000, income = 20000), type = "response")
library(MASS)
model3 = lda(default ~ balance, data = Default)
model3
plot(model3)
predict(model3)$class[1:10]
predict(model3)$posterior[1:10]
model4 = lda(default ~ balance + income, data = Default)
table_lda = table(Real = Default$default, Est = predict(model4)$class)
table_lda
model5 = qda(default ~ balance, data = Default)
model5
predict(model5)$class[1:10]
predict(model3)$posterior[1:10]
model6 = qda(default ~ balance + income, data = Default)
table_qda = table(Real = Default$default, Est = predict(model6)$class)
table_qda
library(e1071)
model7 = naiveBayes(default ~ balance, data = Default)
model7
model8 = naiveBayes(default ~ income + balance, data = Default)
table_nb = table(real = Default$default, pred = predict(model8, Default))
table_nb
table_lr;table_lda;table_qda;table_nb
accuracy = function(table){(table[1,1]+table[2,2])/sum(table)}
accuracy(table_lr)
accuracy(table_lda)
accuracy(table_qda)
accuracy(table_nb)
sensitivity = function(table){(table[2,2])/(table[2,1]+table[2,2])}
sensitivity(table_lr)
sensitivity(table_lda)
sensitivity(table_qda)
sensitivity(table_nb)
specificity = function(table){(table[1,1])/(table[1,1]+table[1,2])}
specificity(table_lr)
specificity(table_lda)
specificity(table_qda)
specificity(table_nb)
precision = function(table){(table[2,2])/(table[1,2]+table[2,2])}
precision(table_lr)
precision(table_lda)
precision(table_qda)
precision(table_nb)
f1 = function(table){2*sensitivity(table)*precision(table)/(sensitivity(table)+precision(table))}
f1(table_lr)
f1(table_lda)
f1(table_qda)
f1(table_nb)
head(iris)
table(iris$Species)
#glm(as.factor(Species) ~ ., data = iris)
library(nnet)
data <- iris %>% mutate(Species = relevel(Species, ref = "setosa"))
multi <- multinom(Species ~ ., data = data)
summary(multi)
z <- summary(multi)$coefficients/summary(multi)$standard.errors
p <- (1 - pnorm(abs(z), 0, 1)) * 2
p
head(fitted(multi))
predictions <- predict(multi, type = "class")
table(iris$Species, predictions)
library(glmnet)
x <- as.matrix(Default[,3:4])
y <- ifelse(Default$default == "Yes", 1, 0)
ridge.model = glmnet(x, y, family = binomial, alpha = 0, data = Default, lambda = 0.001)
lasso.model = glmnet(x, y, family = binomial, alpha = 1, data = Default, lambda = 0.001)
ridge.prob <- as.vector(predict(ridge.model, s = 0.001, type = "response", newx = x))
ridge.predictions <- ifelse(ridge.prob >= 0.5, 1, 0)
table(Default$default, ridge.predictions)
lasso.prob <- predict(lasso.model, s = 0.001, type = "response", newx = x)
lasso.predictions <- ifelse(lasso.prob >= 0.5, 1, 0)
table(Default$default, lasso.predictions)
head(Smarket)
model1 <- glm(Direction ~ ., family = binomial, data = df)
head(Smarket)
df <- Smarket
model1 <- glm(Direction ~ ., family = binomial, data = df)
summary(model1)
modela <- glm(Direction ~ ., family = binomial, data = df)
summary(modela)
View(df)
ggplot(data = df) +
geom_line(mapping = aes(x = year, y = Direction))
View(df)
df %>%
group_by(year) %>%
summarise(count(Direction == 'Up'))
df %>%
group_by(Year) %>%
summarise(n(Direction == 'Up'))
df %>%
group_by(Year) %>%
summarise(count(Direction == 'Up'))
df %>%
group_by(Year) %>%
summarise(sum(Direction == 'Up'))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ISLR2)
library(MASS)
modelb <- lda(Direction ~ ., data = df)
summary(df)
modelb <- lda(Direction ~ ., data = df)
summary(modelb)
plot(modelb)
modela <- glm(Direction ~ ., family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(real = df, pred)
modela <- glm(Direction ~ ., family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, pred)
modela <- glm(Direction ~ ., family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
modela <- glm(Direction ~ ., family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df, preda)
modela <- glm(Direction ~ ., family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
head(Smarket)
df <- Smarket %>%
mutate(Direction = ifelse(Direction == 'Up', 1, 0))
View(df)
modela <- glm(Direction ~ ., family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
modela <- glm(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume + Today, family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
modela <- glm(Direction ~ Year + Lag4 + Lag5 + Volume + Today, family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
modela <- glm(Direction ~ Today, family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
modela <- glm(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
modela <- glm(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume + Today, family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
modela <- glm(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
df %>%
mutate(sgk = sign(Today), cors = corr(sgk, Direction)) %>%
print(cors)
df %>%
mutate(sgk = sign(Today), cors = cor(sgk, Direction)) %>%
print(cors)
df %>%
mutate(sgk = sign(sign(Today) + 1), cors = cor(sgk, Direction)) %>%
print(cors)
df %>% transmutate(sgk = sign(sign(Today) + 1), cors = cor(sgk, Direction))
df %>% transmute(sgk = sign(sign(Today) + 1), cors = cor(sgk, Direction))
modela <- glm(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
head(Smarket)
df <- Smarket
modela <- glm(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
df %>%
group_by(Year) %>%
summarise(sum(Direction == 'Up'))
df %>%
group_by(Year) %>%
summarise(sum(Direction == 'Up'))
modelb <- lda(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = df)
summary(modelb)
plot(modelb)
modelb <- lda(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = df)
summary(modelb)
modelb <- lda(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = df)
modelb
modelc <- qda(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = df)
modelc
predict(modelc)
predict(modelc)$class[1:10]
predict(modelc)$posterior[1:10]
modelc <- qda(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = df)
modelc
#predict(modelc)$class[1:10]
#predict(modelc)$posterior[1:10]
realc <- df$Direction
predc <- predict(modelc)$class
table_c <- table(realc, predc)
modelc <- qda(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = df)
modelc
#predict(modelc)$class[1:10]
#predict(modelc)$posterior[1:10]
realc <- df$Direction
predc <- predict(modelc)$class
table_c <- table(realc, predc)
table_c
modelb <- lda(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = df)
modelb
realb <- df$Direction
predb <- predict(modelb)$class
table_b <- table(realb, predb)
table_b
modela <- glm(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = binomial, data = df)
summary(modela)
preda <- modela$fitted.values > 0.5
table_a <- table(df$Direction, preda)
table_a
modelb <- lda(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = df)
modelb
realb <- df$Direction
predb <- predict(modelb)$class
table_b <- table(realb, predb)
table_b
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ISLR2)
library(MASS)
library(e1071)
modeld = naiveBayes(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = df)
modeld
modeld = naiveBayes(Direction ~ Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = df)
reald <- df$Direction
predd <- predict(modeld, df)
table_d <- table(reald, predd)
table_d
?Recall
recall <- function(table){(table[2,2])/(table[2,1]+table[2,2])}
recall(table_a)
recall(table_b)
recall(table_c)
recall(table_d)
recall(table_e)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ISLR2)
library(MASS)
library(e1071)
library(glmnet)
x <- model.matrix(df)
x <- as.matrix(df)
View(df)
x <- as.matrix(df[,1:7])
View(x)
x_e <- as.matrix(df[,1:7])
y_e <- ifelse(df$Direction == 'Up', 1, 0)
x_e <- as.matrix(df[,1:7])
y_e <- ifelse(df$Direction == 'Up', 1, 0)
lasso.model = glmnet(x_e, y_e, family = binomial, alpha = 1, data = Default, lambda = 0.001)
modele <- summary(modele)
modele = glmnet(x_e, y_e, family = binomial, alpha = 1, data = Default, lambda = 0.001)
modele <- summary(modele)
modele
modele <- glmnet(x_e, y_e, family = binomial, alpha = 1, data = Default, lambda = 0.001)
summary(modele)
cv.out <- cv.glmnet(x_e, y_e, alpha = 0)
bestlam <- cv.out$lambda.min
modele <- glmnet(x_e, y_e, family = binomial, alpha = 1, data = Default, lambda = bestlam)
predict(modele, df)
x_e <- as.matrix(df[,1:7])
y_e <- ifelse(df$Direction == 'Up', 1, 0)
set.seed(42)
cv.out <- cv.glmnet(x_e, y_e, alpha = 0)
bestlam <- cv.out$lambda.min
modele <- glmnet(x_e, y_e, family = binomial, alpha = 1, data = Default, lambda = bestlam)
predict(modele, df[,1:7])
x_e <- as.matrix(df[,1:7])
y_e <- ifelse(df$Direction == 'Up', 1, 0)
set.seed(42)
cv.out <- cv.glmnet(x_e, y_e, alpha = 0)
bestlam <- cv.out$lambda.min
modele <- glmnet(x_e, y_e, family = binomial, alpha = 1, data = Default, lambda = bestlam)
predict(modele, x_e)
x_e <- as.matrix(df[,1:7])
y_e <- ifelse(df$Direction == 'Up', 1, 0)
modele <- glmnet(x_e, y_e, family = binomial, alpha = 1, data = Default, lambda =0.001)
predict(modele, x_e)
x_e <- as.matrix(df[,1:7])
y_e <- ifelse(df$Direction == 'Up', 1, 0)
modele <- glmnet(x_e, y_e, family = binomial, alpha = 1, data = Default, lambda =0.001)
predict(modele, x_e)
x_e <- as.matrix(df[,1:7])
y_e <- ifelse(df$Direction == 'Up', 1, 0)
modele <- glmnet(x_e, y_e, family = binomial, alpha = 1, data = Default, lambda =0.001)
predict(modele, x_e)
reald <- df$Direction
probe <- as.vector(predict(modele, s = 0.001, type = "response", newx = x))
prede <- ifelse(probe >= 0.5, 1, 0)
table(reale, prede)
x_e <- as.matrix(df[,1:7])
y_e <- ifelse(df$Direction == 'Up', 1, 0)
modele <- glmnet(x_e, y_e, family = binomial, alpha = 1, data = Default, lambda =0.001)
real_e <- df$Direction
prob_e <- as.vector(predict(modele, s = 0.001, type = "response", newx = x_e))
pred_e <- ifelse(prob_e >= 0.5, 1, 0)
table_e <- table(real_e, pred_e)
table_e
recall <- function(table){(table[2,2])/(table[2,1]+table[2,2])}
recall(table_a)
recall(table_b)
recall(table_c)
recall(table_d)
recall(table_e)
